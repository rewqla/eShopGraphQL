schema {
  query: Query
  mutation: Mutation
}

union UpdateProductError = InvalidBrandIdError | InvalidProductTypeIdError | ArgumentError | MaxStockThresholdToSmallError | InvalidProductIdError

type CreateProductPayload {
  product: Product
  errors: [CreateProductError!]
}

input CreateProductInput {
  name: String!
  description: String
  price: Decimal!
  typeId: ID!
  brandId: ID!
  restockThreshold: Int!
  maxStockThreshold: Int!
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  name: SearchStringOperationFilterInput
  type: ProductTypeFilterInput
  brand: BrandFilterInput
  price: DecimalOperationFilterInput
  availableStock: IntOperationFilterInput
}

type CreateBrandPayload {
  brand: Brand!
}

type CustomError implements IMyErrorInterface {
  message: String!
  id: Int!
}

input ProductTypeSortInput {
  name: SortEnumType
}

input ListFilterInputTypeOfProductFilterInput {
  all: ProductFilterInput
  none: ProductFilterInput
  some: ProductFilterInput
  any: Boolean
}

input CreateBrandInput {
  name: String!
}

input ProductSortInput {
  name: SortEnumType
  price: SortEnumType
  brand: BrandSortInput
  type: ProductTypeSortInput
}

input BrandSortInput {
  name: SortEnumType
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type ArgumentError implements IMyErrorInterface {
  message: String!
  paramName: String
}

interface IMyErrorInterface {
  message: String!
}

input DefaultStringOperationFilterInput {
  and: [DefaultStringOperationFilterInput!]
  or: [DefaultStringOperationFilterInput!]
  eq: String
  startsWith: String
}

type Mutation {
  createBrand(input: CreateBrandInput!): CreateBrandPayload!
  createProduct(input: CreateProductInput!): CreateProductPayload!
  updateProduct(input: UpdateProductInput!): UpdateProductPayload!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type InvalidBrandIdError implements IMyErrorInterface {
  id: ID!
  message: String!
}

enum SortEnumType {
  ASC
  DESC
}

"An edge in a connection."
type ProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

"A segment of a collection."
type ProductsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Product!]
  totalCount: Int!
}

type UpdateProductPayload {
  product: Product
  errors: [UpdateProductError!]
}

"An edge in a connection."
type BrandsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Brand!
}

"An edge in a connection."
type ProductTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ProductType!
}

input UpdateProductInput {
  id: ID!
  name: String = ""
  description: String
  price: Float! = 0
  typeId: ID = "UHJvZHVjdFR5cGU6Mg=="
  brandId: ID = "QnJhbmQ6MTQ="
  restockThreshold: Int! = 0
  maxStockThreshold: Int! = 0
}

type InvalidProductTypeIdError implements IMyErrorInterface {
  id: ID!
  message: String!
}

type InvalidProductIdError implements IMyErrorInterface {
  id: ID!
  message: String!
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  brands("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): BrandsConnection
  brandById(id: ID!): Brand
  brandByName(name: String!): Brand
  products(skip: Int take: Int where: ProductFilterInput order: [ProductSortInput!]): ProductsCollectionSegment
  productById(id: ID!): ProductByIdResult!
  productTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ProductTypesConnection
  productTypeById(id: ID!): ProductType
  productTypeByName(name: String!): ProductType
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

type Brand implements Node {
  products("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ProductsConnection
  errors: String!
  id: ID!
  name: String!
}

input BrandFilterInput {
  and: [BrandFilterInput!]
  or: [BrandFilterInput!]
  id: IntOperationFilterInput
  name: DefaultStringOperationFilterInput
  products: ListFilterInputTypeOfProductFilterInput
}

"A connection to a list of items."
type ProductTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductTypesEdge!]
  "A flattened list of the nodes."
  nodes: [ProductType!]
}

input SearchStringOperationFilterInput {
  and: [SearchStringOperationFilterInput!]
  or: [SearchStringOperationFilterInput!]
  eq: String
  neq: String
  startsWith: String
  nstartsWith: String
  contains: String
  ncontains: String
  in: String
  nin: String
  endsWith: String
  nendsWith: String
}

union CreateProductError = InvalidBrandIdError | InvalidProductTypeIdError | ArgumentError | MaxStockThresholdToSmallError

"A connection to a list of items."
type ProductsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductsEdge!]
  "A flattened list of the nodes."
  nodes: [Product!]
}

"The built-in `Decimal` scalar type."
scalar Decimal

union ProductByIdResult = Product | CustomError

input ProductTypeFilterInput {
  and: [ProductTypeFilterInput!]
  or: [ProductTypeFilterInput!]
  id: IntOperationFilterInput
  name: DefaultStringOperationFilterInput
  products: ListFilterInputTypeOfProductFilterInput
}

"A connection to a list of items."
type BrandsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BrandsEdge!]
  "A flattened list of the nodes."
  nodes: [Brand!]
}

type ProductType implements Node {
  productsAsync: [Product]!
  id: ID!
  name: String!
  products: [Product!]!
}

type MaxStockThresholdToSmallError implements IMyErrorInterface {
  message: String!
  restockThreshold: Int!
  maxStockThreshold: Int!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type Product implements Node {
  internalId: Int!
  errors: String!
  nullableErrors: String
  brand: Brand
  productType: ProductType
  id: ID!
  name: String!
  description: String
  price: Decimal!
  imageFileName: String
  type: ProductType
  availableStock: Int!
  restockThreshold: Int!
  maxStockThreshold: Int!
  onReorder: Boolean!
}