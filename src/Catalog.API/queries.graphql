
//Get brands with some filds and node product

query {
  brands(first: 3) {
    nodes {
      name
      products {
        nodes {
          availableStock
          description
          id
          imageFileName
          maxStockThreshold
          name
          onReorder
          price
          restockThreshold
        }
      }
    }
  }
}

//Get products with some filds and nested brand

query {
  products(first: 3) {
    nodes {
      id
      name
      brand {
        id
        name
      }
    }
  }
}

//Execute functions and get result fields

query {
  brandByName(name: "Solstix") {
    name
    id
  }
  brandById(id: "QnJhbmQ6MTA=") {
    name
  }
}

// Add brand
mutation{
  createBrand(name:"123"){
    id
    name
  }
}

// Add brand using mutation design principal
mutation{
  createBrand(input:{name:"Test branch"}){
    brand{
      id
      name
    }
  }
}


// Mutation with handling exception
mutation {
  createProduct(
    input: {
      name: "Some"
      price: 2.1
      brandId: 10000
      typeId: 1
      restockThreshold: 15
      maxStockThreshold: 30
    }
  ) {
    product {
      id
      name
    }
    errors {
      kind: __typename
      ... on ArgumentError {
        message
        paramName
      }
      ... on InvalidBrandIdError {
        brandId: id
        message
      }
      ... on InvalidProductTypeIdError {
        productTypeId: id
        message
      }
      ... on MaxStockThresholdToSmallError {
        message
        restockThreshold
        maxStockThreshold
      }
    }
  }
}
// Mutation with handling exception + creating product
mutation {
  createProduct(
    input: {
      name: "123"
      price: 2.1
      brandId: "QnJhbmQ6MTA="
      typeId: "UHJvZHVjdFR5cGU6NA=="
      restockThreshold: 15
      maxStockThreshold: 30
    }
  ) {
    product {
      id
      name
    }
    errors {
      kind: __typename
      ... on ArgumentError {
        message
        paramName
      }
      ... on InvalidBrandIdError {
        brandId: id
        message
      }
      ... on InvalidProductTypeIdError {
        productTypeId: id
        message
      }
      ... on MaxStockThresholdToSmallError {
        message
        restockThreshold
        maxStockThreshold
      }
    }
  }
}

// patch update
mutation updateProduct($input: UpdateProductInput!) {
  updateProduct(input: $input) {
    product {
      name
      id
    }
    errors {
      kind: __typename
      ... on ArgumentError {
        message
        paramName
      }
      ... on InvalidBrandIdError {
        brandId: id
        message
      }
      ... on InvalidProductTypeIdError {
        productTypeId: id
        message
      }
      ... on MaxStockThresholdToSmallError {
        message
        restockThreshold
        maxStockThreshold
      }
    }
  }
}
{
  "input": {
    "id": "UHJvZHVjdDoxMDAw",
    "name": "Green Equipment2"
  }
}


// where in
query {
  products(first: 2, where: { brandId: { in: 1 } }) {
    nodes {
      id
      name
      brand {
        id
        name
      }
      type {
        id
      }
      price
    }
  }
}

//--------------
query {
  products(after: "QWVyb0xpdGUgQ3ljbGluZyBIZWxtZXQ6OTU=") {
    nodes {
      id
      name
      brand {
        id
        name
      }
      type {
        id
      }
      price
    }
    edges {
      cursor
    }
  }
}

///--------------------------- with UsePaging
query {
  products(where: { name: { contains: "GPS" } }, order: { price: ASC },first: 5) {
    nodes {
      id
      name
      brand {
        id
        name
      }
      type {
        id
      }
      price
    }
    edges {
      cursor
    }
  }
}

///--------------------------- with UseOffSetPaging
query {
  products(skip: 2, take: 3, where: { name: { contains: "GPS" } }, order: { price: ASC }) {
    items {
      id
      name
      brand {
        id
        name
      }
      type {
        id
      }
      price
    }
  }
}